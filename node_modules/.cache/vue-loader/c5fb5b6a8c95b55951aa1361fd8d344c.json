{"remainingRequest":"C:\\study\\Project_Front\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\study\\Project_Front\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!C:\\study\\Project_Front\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\study\\Project_Front\\src\\views\\MainPage.vue?vue&type=template&id=03d9b622&scoped=true&","dependencies":[{"path":"C:\\study\\Project_Front\\src\\views\\MainPage.vue","mtime":1652066087638},{"path":"C:\\study\\Project_Front\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1652066113276},{"path":"C:\\study\\Project_Front\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1652066132203},{"path":"C:\\study\\Project_Front\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1652066113276},{"path":"C:\\study\\Project_Front\\node_modules\\vue-loader\\lib\\index.js","mtime":1652066132198}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}